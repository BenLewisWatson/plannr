// Mixins  
//==============================================================================

// Simplified Media Queries
//==============================================================================
@mixin mediaq-size($media-size){
    @media only screen and (max-width:$media-size +px) { @content; }  
}

@mixin mediaq-minmax($media-sizemin, $media-sizemax){
    @media only screen and (min-width:$media-sizemin +px) and (max-width:$media-sizemax +px) { @content; } 
}


// Link Colour mixing
//==============================================================================
/* 
 * @include link(1, #000, #000, #000, 0, 1, 1); 
 * -----------------------------------------
 * $size = Font size in em's
 * $color = link color and visited link color
 * $hcolor = hover link color
 * $acolor = active link color
 * $weight = font weight bold yes (1) or no (0)
 * $underline = text decoration underline yes (1) or no (0)
 * $onlink = if the style is on the actual link or on a section where the link 
 *           is a child, yes on the link (1) No link is a child (0)
 * 
*/
@mixin link($size, $color, $hcolor, $acolor, $weight, $underline, $onlink){

    @if $onlink == 1{
        font-size: $size +em;
        color: $color;
        @if $underline == 1{
            text-decoration: underline;
        }
        @if $weight == 1{
            font-weight: bold;
        }

        &:visited {
            color: $color;
        }
        &:hover {
            color: $hcolor;
        }
        &:active{
            color: $acolor;
        }
    }

    @if $onlink == 0{
        a {
            font-size: $size +em;
            color: $color;
            @if $underline == 1{
                text-decoration: underline;
            }
            @if $weight == 1{
                font-weight: bold;
            }

            &:visited {
                color: $color;
            }
            &:hover {
                color: $hcolor;
            }
            &:active{
                color: $acolor;
            }
        }
    }
}

// linear Gradient Mixin
//==============================================================================

@mixin linear-gradient($fromColor, $toColor) {
  background-color: $toColor; /* Fallback Color */
  background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor)); /* Saf4+, Chrome */
  background-image: -webkit-linear-gradient(top, $fromColor, $toColor); /* Chrome 10+, Saf5.1+, iOS 5+ */
  background-image:    -moz-linear-gradient(top, $fromColor, $toColor); /* FF3.6 */
  background-image:     -ms-linear-gradient(top, $fromColor, $toColor); /* IE10 */
  background-image:      -o-linear-gradient(top, $fromColor, $toColor); /* Opera 11.10+ */
  background-image:         linear-gradient(top, $fromColor, $toColor);
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}

// RGBA Mixin
//==============================================================================

@mixin bg-rgba($color, $opacity: 0.9) {
    background: $color;
    background: rgba($color, $opacity);
}


// Font-Size 
//==============================================================================
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 * 
   `@include font-size(10);`
 * 
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
@mixin font-size($font-size) {
    font-size: $font-size +px;
    font-size: $font-size / $base-font-size +rem;
    line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
}


// Vendor Prefix
//==============================================================================
/**
 * Create vendor-prefixed CSS in one go, e.g.
 * 
   `@include vendor(border-radius, 4px);`
 * 
 */
@mixin vendor($property, $value) {
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}

// Key Frames
//==============================================================================
/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 * 
   .foo{
       @include vendor(animation, shrink 3s);
   }
   
   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 * 
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
@mixin keyframe ($animation-name) {
    @-webkit-keyframes $animation-name {
        @content;
    }
    
    @-moz-keyframes $animation-name {
        @content;
    }
    
    @-ms-keyframes $animation-name {
        @content;
    }
    
    @-o-keyframes $animation-name {
        @content;
    }
    
    @keyframes $animation-name {
        @content;
    }
}



// CSS truncate 
//==============================================================================
/**
 * Force overly long spans of text to truncate, e.g.:
 * 
   `@include truncate(100%);`
 * 
 * Where `$truncation-boundary` is a united measurement.
 */
@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

// CSS Arrows
//==============================================================================
/**
 * CSS arrows!!! But... before you read on, you might want to grab a coffee...
 * 
 * This mixin creates a CSS arrow on a given element. We can have the arrow
 * appear in one of 12 locations, thus:
 * 
 *       01    02    03
 *    +------------------+
 * 12 |                  | 04
 *    |                  |
 * 11 |                  | 05
 *    |                  |
 * 10 |                  | 06
 *    +------------------+
 *       09    08    07
 * 
 * You pass this position in along with a desired arrow color and optional
 * border color, for example:
 * 
 * `@include arrow(top, left, red)`
 * 
 * for just a single, red arrow, or:
 * 
 * `@include arrow(bottom, center, red, black)`
 * 
 * which will create a red triangle with a black border which sits at the bottom
 * center of the element. Call the mixin thus: 
 * 
   .foo{
       background-color:#BADA55;
       border:1px solid #ACE;
       @include arrow(top, left, #BADA55, #ACE);
   }
 * 
 */
@mixin arrow($arrow-edge, $arrow-location, $arrow-color, $border-color: $arrow-color) {
    
    @if $arrow-edge == top {
        
        @extend %arrow--top;
        
        &:before {
            border-bottom-color: $border-color;
        }
        
        &:after {
            border-bottom-color: $arrow-color;
        }
        
        @if $arrow-location == left {
            @extend %arrow--left;
        }
        
        @if $arrow-location == center {
            @extend %arrow--center;
        }
        
        @if $arrow-location == right {
            @extend %arrow--right;
        }
        
    }
        
    @if $arrow-edge == right {
        
        @extend %arrow--far;
        
        &:before {
            border-left-color: $border-color;
        }
        
        &:after {
            border-left-color: $arrow-color;
        }
        
        @if $arrow-location == top {
            @extend %arrow--upper;
        }
        
        @if $arrow-location == center {
            @extend %arrow--middle;
        }
        
        @if $arrow-location == bottom {
            @extend %arrow--lower;
        }
        
    }
    
    @if $arrow-edge == bottom {
        
        @extend %arrow--bottom;
        
        &:before {
            border-top-color: $border-color;
        }
        
        &:after {
            border-top-color: $arrow-color;
        }
        
        @if $arrow-location == left {
            @extend %arrow--left;
        }
        
        @if $arrow-location == center {
            @extend %arrow--center;
        }
        
        @if $arrow-location == right {
            @extend %arrow--right;
        }
        
    }
    
    @if $arrow-edge == left {
        
        @extend %arrow--near;
        
        &:before {
            border-right-color: $border-color;
        }
        
        &:after {
            border-right-color: $arrow-color;
        }
        
        @if $arrow-location == top {
            @extend %arrow--upper;
        }
        
        @if $arrow-location == center {
            @extend %arrow--middle;
        }
        
        @if $arrow-location == bottom {
            @extend %arrow--lower;
        }
        
    }
    
}

// Media Queries 2
//==============================================================================

/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 * 
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * portable
 * desk
 * 
 * Not using a media query will, naturally, serve styles to all devices.
 * 
 * `@include media-query(palm) { [styles here] }`
 * 
 * We work out your end points for you:
 */
$palm-end:              $lap-start +-1;
$lap-end:               $desk-start +-1;

@mixin media-query($media-query) {

    @if $media-query == palm {
        
        @media only screen and (max-width:$palm-end +px) { @content; }
        
    }
    
    @if $media-query == lap {
        
        @media only screen and (min-width:$lap-start +px) and (max-width:$lap-end +px) { @content; }
        
    }
    
    @if $media-query == portable {
        
        @media only screen and (max-width:$lap-end +px) { @content; }
        
    }
    
    @if $media-query == desk {
        
        @media only screen and (min-width:$desk-start +px) { @content; }
        
    }
    
}
